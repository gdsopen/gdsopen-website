name: Deploy Preview

on:
  pull_request:
    types: [opened, synchronize, reopened]

permissions:
  id-token: write
  pull-requests: write
  contents: write

jobs:
  deploy-preview:
    runs-on: ubuntu-latest
    name: Deploy Preview to Cloudflare Workers
    steps:
      - uses: actions/checkout@v4
      
      - uses: pnpm/action-setup@v4
        name: Install pnpm
        with:
          version: 9
          run_install: false

      - name: Install Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 22
          cache: "pnpm"
          
      - name: Install dependencies
        run: pnpm install
        
      - name: Lint and Format Check
        run: pnpm run check
        
      - name: Build
        run: pnpm run build:workers
        
      - name: Deploy Preview to Cloudflare Workers
        id: deploy-workers-preview
        uses: cloudflare/wrangler-action@v3
        with:
          apiToken: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          accountId: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
          command: deploy --env preview
          
      - name: Get deployment URL
        id: deployment-url
        run: |
          # プレビュー環境のURLを取得
          PREVIEW_URL="https://gdsopen-website-preview.${CLOUDFLARE_ACCOUNT_SUBDOMAIN}.workers.dev"
          echo "url=$PREVIEW_URL" >> $GITHUB_OUTPUT
        env:
          CLOUDFLARE_ACCOUNT_SUBDOMAIN: ${{ secrets.CLOUDFLARE_ACCOUNT_SUBDOMAIN }}
          
      - name: Comment Preview URL
        uses: actions/github-script@v7
        with:
          script: |
            const prNumber = context.payload.pull_request.number;
            const deploymentUrl = '${{ steps.deployment-url.outputs.url }}';
            
            const comment = `### 🚀 プレビュー環境にデプロイされました！
            
            **Preview URL**: ${deploymentUrl}
            **Branch**: \`${{ github.head_ref }}\`
            **Commit**: \`${{ github.event.pull_request.head.sha }}\`
            
            このプレビューはPRがマージまたはクローズされるまで利用可能です。`;
            
            // 既存のコメントを検索
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: prNumber,
            });
            
            const botComment = comments.find(comment => 
              comment.user.type === 'Bot' && 
              comment.body.includes('プレビュー環境にデプロイされました')
            );
            
            if (botComment) {
              // 既存のコメントを更新
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: botComment.id,
                body: comment,
              });
            } else {
              // 新しいコメントを作成
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: prNumber,
                body: comment,
              });
            }